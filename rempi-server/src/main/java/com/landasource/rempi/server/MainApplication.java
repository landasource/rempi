package com.landasource.rempi.server;

import javax.ejb.Singleton;

import org.jboss.shrinkwrap.api.Archive;
import org.jboss.shrinkwrap.api.ShrinkWrap;
import org.jboss.shrinkwrap.api.asset.Asset;
import org.jboss.shrinkwrap.api.asset.ClassLoaderAsset;
import org.wildfly.swarm.config.datasources.DataSource;
import org.wildfly.swarm.container.Container;
import org.wildfly.swarm.datasources.DatasourcesFraction;
import org.wildfly.swarm.jaxrs.JAXRSArchive;
import org.wildfly.swarm.jpa.JPAFraction;

import com.landasource.rempi.server.common.Configuration;
import com.landasource.rempi.server.common.RestExceptionMapper;
import com.landasource.rempi.server.ejb.UserBean;
import com.landasource.rempi.server.ejb.UserConverter;
import com.landasource.rempi.server.model.User;
import com.landasource.rempi.server.rs.user.UserResource;

/*
 * This Java source file was auto generated by running 'gradle buildInit --type java-library'
 * by 'Zsolti' at '2016.06.30. 23:42' with Gradle 2.2.1
 *
 * @author Zsolti, @date 2016.06.30. 23:42
 */
@Singleton
public class MainApplication {

    private static final org.slf4j.Logger LOG = org.slf4j.LoggerFactory.getLogger(MainApplication.class);

    public static void main(final String... args) throws Exception {

        final Container container = new Container();

        container.fraction(new DatasourcesFraction()
                .jdbcDriver("h2", (d) -> {
                    d.driverClassName("org.h2.Driver");
                    d.xaDatasourceClass("org.h2.jdbcx.JdbcDataSource");
                    d.driverModuleName("com.h2database.h2");
                })
                .dataSource("MyDS", (ds) -> {
                    ds.driverName("h2");
                    ds.connectionUrl("jdbc:h2:mem:test;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE");
                    ds.userName("sa");
                    ds.password("sa");
                })
                );

        // Prevent JPA Fraction from installing it's default datasource fraction
        container.fraction(new JPAFraction()
                .inhibitDefaultDatasource()
                .defaultDatasource("jboss/datasources/MyDS")
                );

        container.start();

        final JAXRSArchive deployment = ShrinkWrap.create(JAXRSArchive.class);
        deployment.addPackage(MainApplication.class.getPackage());
        deployment.addPackage(UserBean.class.getPackage());
        deployment.addPackage(Configuration.class.getPackage());
        deployment.addPackage(User.class.getPackage());
        deployment.addPackage(UserResource.class.getPackage());
        deployment.addClass(UserConverter.class);

        deployment.addPackage(Asset.class.getPackage());
        deployment.addPackage(Archive.class.getPackage());
        deployment.addPackage(DataSource.class.getPackage());

        deployment.addAsWebInfResource(new ClassLoaderAsset("META-INF/persistence.xml", MainApplication.class.getClassLoader()), "classes/META-INF/persistence.xml");

        deployment.addResource(UserResource.class);
        deployment.addResource(RestExceptionMapper.class);

        deployment.addAllDependencies();

        container.deploy(deployment);

    }

}
